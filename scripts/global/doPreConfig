#!/usr/bin/python3

import junglecatsoftware.awstoolkit.outputFormatters as outf
import boto.utils
import json
import os

outf.printSmallHeader( function='PreConfig' )
outf.printStartDateStamp()

iam_role = None
try:
    iam_role = list( boto.utils.get_instance_metadata()['iam']['security-credentials'].keys() )[0]
except:
    outf.printIndented( 'IAM Role not found', indentLevel=1 )

# Set default values, should work for most cases
ConfigData = {
    'options': {
        'tool': 'shell',
        'script': 'echo -e "Failed to get config options.\\nDid you forget to update values \\"tool\\" and \\"script\\"?"',
    }
}

# Update config data using Instance UserData
try:
    UserData = json.loads(boto.utils.get_instance_userdata())
    ConfigData.update( UserData )
except ValueError:
    outf.printIndented( 'Error: UserData is not JSON! Continuing using default...', indentLevel=1 )

ConfigTool = ConfigData['options']['tool']

# create dependency file, if needed
if ( 'dependancies' in ConfigData['options'] ):
    with open( os.environ['configScript']+'.deps', 'w+' ) as depscript:
        print( '#!/bin/bash', file=depscript )
        for key in list( ConfigData['options']['dependancies'].keys() ):
            dep_name = key
            dep_type = ConfigData['options']['dependancies'][key]['type']
            dep_source = ConfigData['options']['dependancies'][key]['source']
            dep_ignore_dependencies = ''
            if ( 'ignore-dependencies' in list( ConfigData['options']['dependancies'][key].keys() ) ):
                if ( ConfigData['options']['dependancies'][key]['ignore-dependencies'] ):
                    dep_ignore_dependencies = ' --ignore-dependencies '
            if ( dep_type == 'puppet-forge' ):
                print( '/usr/bin/puppet module install ' + dep_source + dep_ignore_dependencies, file=depscript )
            elif ( dep_type == 'puppet-tarball' ):
                print( '/usr/bin/wget -O /tmp/' + dep_name + '.tar.gz ' + dep_source + '&& \\', file=depscript )
                print( '/usr/bin/puppet module install /tmp/' + dep_name + '.tar.gz' + dep_ignore_dependencies, file=depscript )

# dump script to file
with open( os.environ['configScript'], 'w+' ) as confscript:
    if ( ConfigTool == 'shell' ):
        print( '#!/bin/bash', file=confscript )
    elif ( ConfigTool == 'puppet' ):
        print( '#!/usr/bin/puppet apply', file=confscript )
    print( ConfigData['options']['script'], file=confscript )
